# ABSTRACT: Features Transpiler targets
#
# make help
#
.PHONY: all build compile clean test1 test2 help

CONTAINER ?= wkt2geojson
TRANSPILERS_DIR = $(APP_ROOT_DIR)/app_home/transpilers

GCC_FLAGS = -Wall \
          -Wextra \
		  -Wpedantic \
          -Wformat=2 \
		  -Wno-unused-parameter \
		  -Wshadow \
          -Wwrite-strings \
		  -Wstrict-prototypes \
		  -Wold-style-definition \
          -Wredundant-decls \
		  -Wnested-externs \
		  -Wmissing-include-dirs \
		  -Wjump-misses-init \
		  -Wunused \
		  -Wlogical-op \
		  -Wconversion \
		  -Wduplicated-branches \
		  -Wduplicated-cond \
		  -Wfloat-equal \
		  -Winit-self \
		  -O2 \
		  -g


# target: all - Default target that runs the build target
all: build


# target: build - Run the clean and the compile targets
build: clean compile


# target: clean - Remove files generated by old compilation
clean:
	rm -f $(TRANSPILERS_DIR)/features/lex.yy.c
	rm -f $(TRANSPILERS_DIR)/features/features.tab.h
	rm -f $(TRANSPILERS_DIR)/features/features.tab.c
	rm -f $(APP_ROOT_DIR)/app_home/bin/features


# target: compile - Compile the `features` transpiler
compile: lex.yy.c features.tab.h
	gcc $(GCC_FLAGS) \
		-o $(APP_ROOT_DIR)/app_home/bin/features \
		$(TRANSPILERS_DIR)/features/features.c \
		features.tab.c \
		lex.yy.c \
		-I$(TRANSPILERS_DIR)/include \
		$(TRANSPILERS_DIR)/include/gjs.c

	chmod 0755 $(APP_ROOT_DIR)/app_home/bin/features


# Generate the `features` scanner
lex.yy.c:
	flex features.l


# Generate the `features` parser
features.tab.h:
	bison --debug -Wcounterexamples -d features.y


# target: test2 - Compile `test2` program and run into a Valgrind sandbox for testing
test2: clean lex.yy.c features.tab.h
	rm -f $(APP_ROOT_DIR)/tmp/test2.log
	rm -f $(APP_ROOT_DIR)/tmp/test2.json

	gcc $(GCC_FLAGS) \
		-o $(APP_ROOT_DIR)/app_home/bin/features \
		$(TRANSPILERS_DIR)/features/features.c \
		features.tab.c \
		lex.yy.c \
		-I$(TRANSPILERS_DIR)/include \
		$(TRANSPILERS_DIR)/include/gjs.c

	chmod 0755 $(APP_ROOT_DIR)/app_home/bin/features

	valgrind --trace-children=yes \
		--track-fds=yes \
		--track-origins=yes \
		--leak-check=full \
		--show-leak-kinds=all \
		$(APP_ROOT_DIR)/app_home/bin/features \
		$(APP_ROOT_DIR)/tmp/features2.mc \
		$(APP_ROOT_DIR)/tmp/test2.log \
		$(APP_ROOT_DIR)/tmp/test2.json


# target: test1 - Compile `test1` program and run into a Valgrind sandbox for testing
test1:
	rm -f $(APP_ROOT_DIR)/app_home/bin/test1	

	gcc $(GCC_FLAGS) \
		-o $(APP_ROOT_DIR)/app_home/bin/test1 \
		$(TRANSPILERS_DIR)/features/test1.c \
		-I$(TRANSPILERS_DIR)/include \
		$(TRANSPILERS_DIR)/include/gjs.c

	chmod 0755 $(APP_ROOT_DIR)/app_home/bin/test1

	valgrind --trace-children=yes \
		--track-fds=yes \
		--track-origins=yes \
		--leak-check=full \
		--show-leak-kinds=all \
		$(APP_ROOT_DIR)/app_home/bin/test1 \
		$(APP_ROOT_DIR)/tmp/features.lc \
		$(APP_ROOT_DIR)/tmp/test1.log \
		$(APP_ROOT_DIR)/tmp/test1.out


# target: help - Mostra os targets que sao executaveis
help:
	@egrep "^# target:" [Mm]akefile


# EOF                 