# ABSTRACT: Compilation and test targets
#
# Help: make help
#
.PHONY: all build compile clean test help

CONTAINER ?= wkt2geojson

GCC_FLAGS = -Wall \
          -Wextra \
		  -Wpedantic \
          -Wformat=2 \
		  -Wno-unused-parameter \
		  -Wshadow \
          -Wwrite-strings \
		  -Wstrict-prototypes \
		  -Wold-style-definition \
          -Wredundant-decls \
		  -Wnested-externs \
		  -Wmissing-include-dirs \
		  -Wjump-misses-init \
		  -Wunused \
		  -Wlogical-op \
		  -Wconversion \
		  -Wduplicated-branches \
		  -Wduplicated-cond \
		  -Wfloat-equal \
		  -Winit-self \
		  -O2 \
		  -g


# target: all - Default target that runs the build target
all: build


# target: build - Run the clean and the compile targets
build: clean compile


# target: clean - Remove files generated by old compilation
clean:
	rm -f ./lex.yy.c
	rm -f ./parser.tab.h
	rm -f ./parser.tab.c
	rm -f $(APP_ROOT_DIR)/application/bin/wkt2geojson
	rm -f ./test
	rm -f ./test.json


# target: compile - Compile the `wkt2geojson` transpiler
compile: lex.yy.c parser.tab.h
	mkdir -p $(APP_ROOT_DIR)/application/bin
	gcc $(GCC_FLAGS) \
		-o $(APP_ROOT_DIR)/application/bin/wkt2geojson \
		wkt2geojson.c \
		parser.tab.c \
		lex.yy.c \
		gjs.c
	chmod 0755 $(APP_ROOT_DIR)/application/bin/wkt2geojson


# Generate the `wkt2geojson` scanner
lex.yy.c:
	flex scanner.l


# Generate the `wkt2geojson` parser
parser.tab.h:
	bison --debug -Wcounterexamples -d parser.y


# target: test - Compile the `test` program and run into a Valgrind sandbox for testing
test: clean lex.yy.c parser.tab.h

	gcc $(GCC_FLAGS) \
		-o test \
		wkt2geojson.c \
		parser.tab.c \
		lex.yy.c \
		writer.c 
	chmod 0755 test

	valgrind --trace-children=yes \
		--track-fds=yes \
		--track-origins=yes \
		--leak-check=full \
		--show-leak-kinds=all \
		./test < ../samples/wkt/ex4 > test.json


# target: help - Mostra os targets que sao executaveis
help:
	@egrep "^# target:" [Mm]akefile


# EOF                 