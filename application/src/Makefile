# ABSTRACT: Compilation and test targets
#
# This Makefile defines the rules to compile, build, and test the
# `wkt2geojson` project. It includes targets for cleaning up,
# compiling the project, running tests, and generating the scanner
# and parser files using Flex and Bison.
#
# The following targets are available:
# - all: Default target, runs the `build` target.
# - build: Cleans previous build files and compiles the project.
# - clean: Removes files generated by previous compilations.
# - compile: Compiles the `wkt2geojson` transpiler.
# - test: Compiles a test program and runs it under Valgrind to
#   check for memory leaks.
# - help: Displays the available Makefile targets.


.PHONY: all build compile clean test help

# GCC_FLAGS defines the flags used during the compilation process
# to enforce strict standards and warnings, which help in
# identifying potential issues in the code.
GCC_FLAGS = -Wall \
          -Wextra \
		  -Wpedantic \
          -Wformat=2 \
		  -Wno-unused-parameter \
		  -Wshadow \
          -Wwrite-strings \
		  -Wstrict-prototypes \
		  -Wold-style-definition \
          -Wredundant-decls \
		  -Wnested-externs \
		  -Wmissing-include-dirs \
		  -Wjump-misses-init \
		  -Wunused \
		  -Wlogical-op \
		  -Wconversion \
		  -Wduplicated-branches \
		  -Wduplicated-cond \
		  -Wfloat-equal \
		  -Winit-self \
		  -O2 \
		  -g


# target: all - Default target that runs the build target.
all: build


# target: build - Run the clean and the compile targets.
# This ensures that the project is compiled from scratch every time,
# by cleaning up old files first.
build: clean compile


# target: clean - Remove files generated by old compilation.
# This target removes intermediate and output files, such as the lexer,
# parser, and compiled binaries.
clean:
	rm -f ./lex.yy.c
	rm -f ./parser.tab.h
	rm -f ./parser.tab.c
	rm -f $(APP_ROOT_DIR)/application/bin/wkt2geojson
	rm -f ./test
	rm -f ./test.json


# target: compile - Compile the `wkt2geojson` transpiler.
# This target compiles the WKT to GeoJSON transpiler, linking the
# necessary files and outputting the final binary.
compile: lex.yy.c parser.tab.h
	mkdir -p $(APP_ROOT_DIR)/application/bin
	gcc $(GCC_FLAGS) \
		-o $(APP_ROOT_DIR)/application/bin/wkt2geojson \
		wkt2geojson.c \
		parser.tab.c \
		lex.yy.c \
		gjs.c
	chmod 0755 $(APP_ROOT_DIR)/application/bin/wkt2geojson


# target: lex.yy.c - Generate the `wkt2geojson` scanner.
# This target runs Flex to generate the lexer from the scanner.l file.
lex.yy.c:
	flex scanner.l


# target: parser.tab.h - Generate the `wkt2geojson` parser.
# This target runs Bison to generate the parser from the parser.y file,
# creating both the parser implementation and header files.
parser.tab.h:
	bison --debug -Wcounterexamples -d parser.y


# target: test - Compile the `test` program and run into a Valgrind
# sandbox for testing.
# This target compiles a test program using the same source files and
# then runs it under Valgrind to check for memory leaks and other
# runtime issues.
test: clean lex.yy.c parser.tab.h

	gcc $(GCC_FLAGS) \
		-o test \
		wkt2geojson.c \
		parser.tab.c \
		lex.yy.c \
		writer.c
	chmod 0755 test

	valgrind --trace-children=yes \
		--track-fds=yes \
		--track-origins=yes \
		--leak-check=full \
		--show-leak-kinds=all \
		./test < ../samples/wkt/ex4 > test.json


# target: help - Show the available targets.
# This target uses grep to extract and display the list of available
# targets from the Makefile.
help:
	@egrep "^# target:" [Mm]akefile


# EOF
